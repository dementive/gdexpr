# GDExpr syntax test showing all the things you can do with GDExpr.
# This file is for testing, it shows what you can do...not the best way to do it, as a matter of fact you really should not write code like this ever.
# GDExpr works exactly the same as built in Godot Expressions except it has more syntax.

# GDExpr compiles to Godot Expressions so all Godot Expression syntax is also valid in gdexpr, more info here:
# https://docs.godotengine.org/en/stable/classes/class_expression.html
# https://docs.godotengine.org/en/stable/tutorials/scripting/evaluating_expressions.html


# GDExpr variables support all godot Variant types:

# ATOMIC TYPES
# Bool
# Int
# Float
# String

# MATH TYPES
# Vector2
# Vector2i
# Rect2
# Rect2
# Vector3
# Vector3i
# Transform2D
# Vector4
# Vector4i
# Plane
# Quaternion
# AABB
# Basis
# Transform3D
# Projection

# MISC TYPES
# Color
# StringName
# NodePath
# Rid
# Object
# Callable
# Signal
# Dictionary
# Array

# TYPED ARRAYS
# PackedByteArray
# PackedInt32Array
# PackedInt64Array
# PackedFloat32Array
# PackedFloat64Array
# PackedStringArray
# PackedVector2Array
# PackedVector3Array
# PackedColorArray
# PackedVector4Array

# All @GlobalScope methods are also available, a full list is here: https://docs.godotengine.org/en/stable/classes/class_%40globalscope.html#methods

# Comments work in gdexpr!

200 + 300 # End of line comments

# The 'break' keyword breaks the current expression into a new one so their results can be evaluated separately.
break

# Call any function from the base_instance passed into the expression.
do_thing()

# The "---" keyword does the exact same thing as "break" but is less ugly and easier to type.
---

# NOTE that this returns 999 and does not actually call the second do_thing(), so don't do this.
# This is because one of the 5 expressions operators (+, -, /, *, %) must be used in between function calls in the same expression
do_thing() do_thing()

---

# Variables must be declared in the same block together, and have to be the only declaration on the line they are found on.
var this_is_a_variable = 2

# Wow! This variable is really cool!
var wow_cool_variable = 5
var func_variable = do_thing() # Set variable using a function!

---

wow_cool_variable + this_is_a_variable + wow_cool_variable + wow_cool_variable + func_variable + 1 # Math with variables?!

---

# All variables are mutable
var func_variable = func_variable + this_is_a_variable

# This will not work though, you must use the "var" keyword when changing or setting the value of a variable.
# func_variable = func_variable + this_is_a_variable

---

# Test mutable var
func_variable + 0

---
var add_vars_together_in_declaration = this_is_a_variable + this_is_a_variable
---

add_vars_together_in_declaration + 0

---

# Call functions with variable
do_thing_with_variable(this_is_a_variable)

# Assign variable to function called with another variable
var func_variable = do_thing_with_variable(this_is_a_variable)

---

Vector3(5,5, 5) + Vector3(25, 25, 25)

---

# Any variant type can be assigned to a variable.
var my_vector = Vector3(9, 9, 9)

---

my_vector + Vector3(500, 500, 500)

---

# Variables can be used in built in @GlobalScope functions
deg_to_rad(this_is_a_variable)

---
# You can pass any Variant type into any function, this includes data structures like Array and Dictionary.
do_thing_with_dictionary({"test_key": 999}) +
do_thing_with_array([1,2,3,4,5]) +
do_thing_with_dictionary({"test_key": [1,2,3,4,5]})

---
# All GDExpr variables can be declared and used with all of the Godot Variant types and passed into any function.
var var_array = [1,2,3,4,5]
do_thing_with_array(var_array)

---
# Include another file, this helps prevent writing duplicate code! All text from the included file is inserted into this file where the 'include' keyword is found, just like #include in C.
# Note that because of how includes are done you can declare variables that the included file's text will use.
# Also note that circular includes (including a file in a file that includes that file) are not allowed.
# Just like variables, includes must be the only declaration on the line they are found on.
include demo/test_include.gdexpr

# You can use variables declared inside included files.
test_included_variable + 7

# The "define" keyword can be used to preprocess any text, kind of like a lame version of C macros. Macro text is inserted into the gdxpr file before anything else is compiled.
define TEST_DEFINE do_thing() + do_thing()

TEST_DEFINE + TEST_DEFINE

---
# You can even use macros to override keywords (except the define keyword), here is an example of making it seem like variables have types (the compiler will not enforce these types but theoretically a linter could...)
define vec2 var
define vec3 var
define vec4 var

vec2 test_vec2_var = Vector2(0, 0)
vec3 test_vec3_var = Vector3(0, 0, 0)
vec4 test_vec4_var = Vector4(1, 0, 1, 0)

---

test_vec4_var + Vector4(1, 0, 1, 0)

---
var test_variable = 1
var test_variable_2 = 2
var test_variable_3 = 3
---
test_variable + test_variable_2 + test_variable_3

---

# IMPORTANT NOTE: Due to limitations with Godot expressions variables that need to be used as the value of a "repeat" or "if" statement must be marked with the "comptime" keyword.
# The "comptime var" keywords tell the compiler to execute the expression in the variable value at compile time instead of runtime.
# These values must be known at compile time or if statements and loops can't work.

# GDExpr comptime works in a very similar to Zig comptime except only variable can be declared as comptime.
# https://ziglang.org/documentation/0.13.0/#comptime
# https://ziglang.org/documentation/0.13.0/#Compile-Time-Variables

comptime var test_repeat_int = 2
comptime var test_repeat_int_2 = test_repeat_int + 1
comptime var test_comptime_function_call = do_thing() + 1

# This is what if statements would look like...if they worked. If statements are theoretically possible to do but I haven't figured out the implementation yet :(
if Vector2(0, 0) < Vector2(1, 1) and Vector2(1, 1) < Vector2(2, 2)
	900 + 900
	+ 1 + 1

	# Nested conditional logic does not work!!! :(
	# if 1 < 2
	# 	5 + 5
	# endif

else
	200 + 250
endif

# comptime variables can be used in if statement conditions!
# It is very important to note that ONLY variables marked with the "comptime" keyword can be used in if statement conditions.
if test_repeat_int < test_repeat_int_2
	9000 + 1
endif

2 * 2
# Use the "repeat X" keyword where X is an integer number of times to repeat the current expression and break into a new expression once done.
# This block will compile to: ["2*2", "2*2"]. Which is 2 expressions that equal 4.
repeat 2

2 * 2

# Adding a "+" in front of the number of iterations will make it so each iteration is evaluated as a single expression
# This block will compile to: ["(2*2)+(2*2)"]. Which is 1 expression that equal 8.
repeat +2

# A nice side effect of me being forced to implement comptime variables is that they can also be assigned to runtime variables.
# This allows you to optimize some computations by performing them at compile time instead of run time, since there is more execution time overhead than compile time overhead usually.
var test_var = test_repeat_int_2

1 + 1

repeat test_repeat_int


1 + 1

repeat +test_repeat_int_2

test_comptime_function_call + 0

if test_repeat_int < test_repeat_int_2
	9000 + 1

	# Repeat statments can be used inside of if statments with comptime variables!
	repeat +test_repeat_int
endif

print("Hey")
---
prints("Hello", "World!")
---
print(Vector2(1, 1)) # Note that the print functions return void, so they must be the only thing in the expression.
---
print_rich("[color=green][b]Hey There![/b][/color]")

if 1 != 1
	# If you notice reality is not real, the "exit" keyword can be used to terminate execution of the program.
	# Everything before the "exit" statement will be executed.

	push_error(error_string(48))
	exit
else # this else needs to be here after "exit"...not really sure why...
endif

if 0 != 0
	# If the fabric of reality seems to be ripping apart the "bail" keyword can be used to terminate execution of the program.
	# The script will not execute anything if bail is used.
	# bail should never be used unless the entire script will be invalid if a condition is true.

	push_warning(test_repeat_int) # this will not get executed!
	bail
else
endif
